{"ast":null,"code":"var _jsxFileName = \"/workspaces/Checkers-Game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction initialBoard() {\n  const rows = Array(8).fill(null).map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    for (let j = i % 2 === 0 ? 1 : 0; j < 8; j += 2) {\n      if (i < 3) rows[i][j] = \"1\";else if (i > 4) rows[i][j] = \"2\";\n    }\n  }\n  return rows;\n}\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard());\n  const [currentPlayer, setCurrentPlayer] = useState(\"1\");\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [alert, setAlert] = useState({\n    show: false,\n    message: \"\"\n  });\n  const showAlert = message => {\n    setAlert({\n      show: true,\n      message\n    });\n    setTimeout(() => {\n      setAlert({\n        show: false,\n        message: \"\"\n      });\n    }, 3000);\n  };\n  const checkForWinner = board => {\n    let player1Pieces = 0;\n    let player2Pieces = 0;\n    board.forEach(row => {\n      row.forEach(cell => {\n        if (cell && cell.startsWith(\"1\")) {\n          player1Pieces++;\n        } else if (cell && cell.startsWith(\"2\")) {\n          player2Pieces++;\n        }\n      });\n    });\n    if (player1Pieces === 0) {\n      return \"2\";\n    } else if (player2Pieces === 0) {\n      return \"1\";\n    }\n    return null;\n  };\n  const handleClick = (row, col) => {\n    const piece = board[row][col];\n    if (selectedPiece) {\n      if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\n        executeMove(selectedPiece.row, selectedPiece.col, row, col);\n      } else {\n        showAlert(\"Invalid move. Please try again.\");\n        setSelectedPiece(null);\n      }\n    } else {\n      if (piece && (piece.startsWith(currentPlayer) || piece.length === 3 && piece[0] === currentPlayer)) {\n        setSelectedPiece({\n          row,\n          col\n        });\n      } else {\n        showAlert(\"Wrong piece selected. It's not your turn.\");\n      }\n    }\n  };\n  const executeMove = (startRow, startCol, endRow, endCol) => {\n    const newBoard = board.map(row => [...row]);\n    let piece = board[startRow][startCol];\n    if (endRow === 0 && piece === \"2\" || endRow === 7 && piece === \"1\") {\n      piece += \"K\";\n    }\n    newBoard[endRow][endCol] = piece;\n    newBoard[startRow][startCol] = null;\n    if (Math.abs(startRow - endRow) === 2) {\n      const middleRow = Math.floor((startRow + endRow) / 2);\n      const middleCol = Math.floor((startCol + endCol) / 2);\n      newBoard[middleRow][middleCol] = null;\n    }\n    setBoard(newBoard);\n    setSelectedPiece(null);\n    setCurrentPlayer(currentPlayer === \"1\" ? \"2\" : \"1\");\n    const gameWinner = checkForWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n      console.log(`Game Over! Player ${gameWinner} wins!`);\n    }\n  };\n  const isValidMove = (startRow, startCol, endRow, endCol) => {\n    const startPiece = board[startRow][startCol];\n    const isKing = startPiece && startPiece.includes(\"K\");\n    const rowDiff = endRow - startRow;\n    const colDiff = endCol - startCol;\n    if (board[endRow][endCol] !== null) {\n      showAlert(\"Invalid move: Please try again.\");\n      return false;\n    }\n    if (isKing) {\n      if (Math.abs(rowDiff) === 1 && Math.abs(colDiff) === 1) {\n        return true;\n      } else if (Math.abs(rowDiff) === 2 && Math.abs(colDiff) === 2) {\n        return checkCapture(startRow, startCol, endRow, endCol);\n      }\n    } else {\n      const isPlayer1 = startPiece.startsWith(\"1\");\n      const forwardMove = isPlayer1 ? rowDiff === 1 || rowDiff === 2 : rowDiff === -1 || rowDiff === -2;\n      const validDirection = isPlayer1 ? rowDiff > 0 : rowDiff < 0;\n      if (Math.abs(colDiff) === Math.abs(rowDiff) && forwardMove) {\n        if (Math.abs(rowDiff) === 2) {\n          return checkCapture(startRow, startCol, endRow, endCol);\n        }\n        return validDirection;\n      }\n    }\n    showAlert(\"Invalid move: Move does not comply with the rules.\");\n    return false;\n  };\n  const checkCapture = (startRow, startCol, endRow, endCol) => {\n    const middleRow = Math.floor((startRow + endRow) / 2);\n    const middleCol = Math.floor((startCol + endCol) / 2);\n    const middlePiece = board[middleRow][middleCol];\n    const startPiece = board[startRow][startCol];\n    return middlePiece !== null && middlePiece[0] !== startPiece[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Checkers Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), alert.show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-warning`,\n      children: alert.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onClick: winner ? null : handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), winner ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! Player \", winner, \" wins!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Player: \", currentPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nU4LoL2ndAGn2U0rAwm35anVkS4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Board","jsxDEV","_jsxDEV","initialBoard","rows","Array","fill","map","i","j","App","_s","board","setBoard","currentPlayer","setCurrentPlayer","selectedPiece","setSelectedPiece","winner","setWinner","alert","setAlert","show","message","showAlert","setTimeout","checkForWinner","player1Pieces","player2Pieces","forEach","row","cell","startsWith","handleClick","col","piece","isValidMove","executeMove","length","startRow","startCol","endRow","endCol","newBoard","Math","abs","middleRow","floor","middleCol","gameWinner","console","log","startPiece","isKing","includes","rowDiff","colDiff","checkCapture","isPlayer1","forwardMove","validDirection","middlePiece","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Checkers-Game/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction initialBoard() {\n  const rows = Array(8)\n    .fill(null)\n    .map(() => Array(8).fill(null));\n  for (let i = 0; i < 8; i++) {\n    for (let j = i % 2 === 0 ? 1 : 0; j < 8; j += 2) {\n      if (i < 3) rows[i][j] = \"1\";\n      else if (i > 4) rows[i][j] = \"2\";\n    }\n  }\n  return rows;\n}\n\nconst App = () => {\n  const [board, setBoard] = useState(initialBoard());\n  const [currentPlayer, setCurrentPlayer] = useState(\"1\");\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [alert, setAlert] = useState({ show: false, message: \"\" });\n\n  const showAlert = (message) => {\n    setAlert({ show: true, message });\n    setTimeout(() => {\n      setAlert({ show: false, message: \"\" });\n    }, 3000);\n  };\n\n  const checkForWinner = (board) => {\n    let player1Pieces = 0;\n    let player2Pieces = 0;\n\n    board.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell && cell.startsWith(\"1\")) {\n          player1Pieces++;\n        } else if (cell && cell.startsWith(\"2\")) {\n          player2Pieces++;\n        }\n      });\n    });\n\n    if (player1Pieces === 0) {\n      return \"2\";\n    } else if (player2Pieces === 0) {\n      return \"1\";\n    }\n\n    return null;\n  };\n\n  const handleClick = (row, col) => {\n    const piece = board[row][col];\n\n    if (selectedPiece) {\n      if (isValidMove(selectedPiece.row, selectedPiece.col, row, col)) {\n        executeMove(selectedPiece.row, selectedPiece.col, row, col);\n      } else {\n        showAlert(\"Invalid move. Please try again.\");\n        setSelectedPiece(null);\n      }\n    } else {\n      if (\n        piece &&\n        (piece.startsWith(currentPlayer) ||\n          (piece.length === 3 && piece[0] === currentPlayer))\n      ) {\n        setSelectedPiece({ row, col });\n      } else {\n        showAlert(\"Wrong piece selected. It's not your turn.\");\n      }\n    }\n  };\n\n  const executeMove = (startRow, startCol, endRow, endCol) => {\n    const newBoard = board.map((row) => [...row]);\n    let piece = board[startRow][startCol];\n\n    if ((endRow === 0 && piece === \"2\") || (endRow === 7 && piece === \"1\")) {\n      piece += \"K\";\n    }\n\n    newBoard[endRow][endCol] = piece;\n    newBoard[startRow][startCol] = null;\n\n    if (Math.abs(startRow - endRow) === 2) {\n      const middleRow = Math.floor((startRow + endRow) / 2);\n      const middleCol = Math.floor((startCol + endCol) / 2);\n      newBoard[middleRow][middleCol] = null;\n    }\n\n    setBoard(newBoard);\n    setSelectedPiece(null);\n    setCurrentPlayer(currentPlayer === \"1\" ? \"2\" : \"1\");\n    const gameWinner = checkForWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n      console.log(`Game Over! Player ${gameWinner} wins!`);\n    }\n  };\n\n  const isValidMove = (startRow, startCol, endRow, endCol) => {\n    const startPiece = board[startRow][startCol];\n    const isKing = startPiece && startPiece.includes(\"K\");\n    const rowDiff = endRow - startRow;\n    const colDiff = endCol - startCol;\n\n    if (board[endRow][endCol] !== null) {\n      showAlert(\"Invalid move: Please try again.\");\n      return false;\n    }\n\n    if (isKing) {\n      if (Math.abs(rowDiff) === 1 && Math.abs(colDiff) === 1) {\n        return true;\n      } else if (Math.abs(rowDiff) === 2 && Math.abs(colDiff) === 2) {\n        return checkCapture(startRow, startCol, endRow, endCol);\n      }\n    } else {\n      const isPlayer1 = startPiece.startsWith(\"1\");\n      const forwardMove = isPlayer1\n        ? rowDiff === 1 || rowDiff === 2\n        : rowDiff === -1 || rowDiff === -2;\n      const validDirection = isPlayer1 ? rowDiff > 0 : rowDiff < 0;\n\n      if (Math.abs(colDiff) === Math.abs(rowDiff) && forwardMove) {\n        if (Math.abs(rowDiff) === 2) {\n          return checkCapture(startRow, startCol, endRow, endCol);\n        }\n        return validDirection;\n      }\n    }\n\n    showAlert(\"Invalid move: Move does not comply with the rules.\");\n    return false;\n  };\n\n  const checkCapture = (startRow, startCol, endRow, endCol) => {\n    const middleRow = Math.floor((startRow + endRow) / 2);\n    const middleCol = Math.floor((startCol + endCol) / 2);\n    const middlePiece = board[middleRow][middleCol];\n    const startPiece = board[startRow][startCol];\n    return middlePiece !== null && middlePiece[0] !== startPiece[0];\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Checkers Game</h1>\n      {alert.show && (\n        <div className={`alert alert-warning`}>{alert.message}</div>\n      )}\n      <Board board={board} onClick={winner ? null : handleClick} />\n      {winner ? (\n        <p>Game Over! Player {winner} wins!</p>\n      ) : (\n        <p>Current Player: {currentPlayer}</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}